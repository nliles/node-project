var fs = require("fs"),
	scanFolder = require("scan-folder"),
	miniHTML = require("mini-html"),
	miniCSS = require("mini-css"),
	minifyjs = require("uglify-js").minify,
	root = require("app-root-path"),
	images = /\/(.*)\.(png|jpg|jpeg|gif|ico)/g;
		
module.exports = function(htmlfile, outfile, sourcedirs, minify, inlineassets) {
	var embedcss = "",
		embedjs = "",
		jsfiles = [],
		cssfiles = [],
		i = 0, len = 0;
	var bundle = fs.readFileSync(htmlfile).toString("utf8");
		
	for(i=0, len=sourcedirs.length; i<len; i++) {
		var src = sourcedirs[i],
			newcssfiles = scanFolder(src, ".css", true),
			newjsfiles = scanFolder(src, ".js", true);
		if(newcssfiles && newcssfiles.length) {
			cssfiles = cssfiles.concat(newcssfiles);
		}	
		if(newjsfiles && newjsfiles.length) {
			jsfiles = jsfiles.concat(newjsfiles);
		}
	}
	
	for(i=0, len=cssfiles.length; i<len; i++) {
		embedcss += "\n" + fs.readFileSync(cssfiles[i]);
	}
	for(i=0, len=jsfiles.length; i<len; i++) {
		embedjs += "\n" + fs.readFileSync(jsfiles[i]);
	}
	
	if(inlineassets) {
		embedcss = embedcss.replace(images, embedAsset);
		bundle = bundle.replace(images, embedAsset);
	}
	
	if(minify) {
		embedjs = minifyjs(embedjs, {fromString: true}).code;
		embedcss = miniCSS(embedcss);
		bundle = miniHTML(null, bundle);
	}
	
	if(bundle.indexOf("</head>") > -1) {
    	bundle = injectTag(bundle, "</head>", "<script>", embedjs);
		bundle = injectTag(bundle, "</head>", "<style>", embedcss);
	} else {
		bundle = "<style>" + embedcss + "</style>" + bundle + "<script>" + embedjs + "</script>";
	}
	
	if(outfile) {
		if(fs.existsSync(outfile)) {
			fs.unlinkSync(outfile);
		}
		fs.writeFileSync(outfile, bundle);
	}
	return outfile;
};

function injectTag(html, target, tag, content) {
    return html.replace(target, tag + content + tag.replace("<", "</") + target);
}

function embedAsset(match, file, type) {
	var filepath = file + "." + type;
    var base64 = fs.readFileSync(root + "/" + filepath).toString("base64");
    return "data:image/" + (type === "jpg" ? "jpeg" : type) + ";base64," + base64;
}