{
  "_args": [
    [
      {
        "raw": "mensch@^0.3.3",
        "scope": null,
        "escapedName": "mensch",
        "name": "mensch",
        "rawSpec": "^0.3.3",
        "spec": ">=0.3.3 <0.4.0",
        "type": "range"
      },
      "/Users/natalieliles/Desktop/node-project/node_modules/juice"
    ]
  ],
  "_from": "mensch@>=0.3.3 <0.4.0",
  "_id": "mensch@0.3.3",
  "_inCache": true,
  "_location": "/mensch",
  "_nodeVersion": "0.12.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/mensch-0.3.3.tgz_1475534328172_0.8808043990284204"
  },
  "_npmUser": {
    "name": "bago75",
    "email": "npm@bago.org"
  },
  "_npmVersion": "2.7.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mensch@^0.3.3",
    "scope": null,
    "escapedName": "mensch",
    "name": "mensch",
    "rawSpec": "^0.3.3",
    "spec": ">=0.3.3 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/juice"
  ],
  "_resolved": "https://registry.npmjs.org/mensch/-/mensch-0.3.3.tgz",
  "_shasum": "e200ff4dd823717f8e0563b32e3f5481fca262b2",
  "_shrinkwrap": null,
  "_spec": "mensch@^0.3.3",
  "_where": "/Users/natalieliles/Desktop/node-project/node_modules/juice",
  "author": {
    "name": "Brett Stimmerman",
    "email": "brettstimmerman@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/brettstimmerman/mensch/issues"
  },
  "dependencies": {},
  "description": "A decent CSS parser",
  "devDependencies": {
    "jshint": "*",
    "mocha": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "e200ff4dd823717f8e0563b32e3f5481fca262b2",
    "tarball": "https://registry.npmjs.org/mensch/-/mensch-0.3.3.tgz"
  },
  "gitHead": "3c9cc0104984ccbbb6a27255ff36b9934f42e868",
  "homepage": "https://github.com/brettstimmerman/mensch",
  "keywords": [
    "css",
    "parser",
    "parsing",
    "stylesheet"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "bago75",
      "email": "npm@bago.org"
    },
    {
      "name": "brett",
      "email": "brettstimmerman@gmail.com"
    }
  ],
  "name": "mensch",
  "optionalDependencies": {},
  "readme": "# mensch [![Build Status](https://secure.travis-ci.org/brettstimmerman/mensch.png?branch=master)](http://travis-ci.org/brettstimmerman/mensch)\r\n\r\nA decent CSS parser.\r\n\r\n# usage\r\n\r\n```sh\r\nnpm install mensch\r\n```\r\n\r\n```js\r\nvar mensch = require('mensch');\r\n\r\nvar ast = mensch.parse('p { color: black; }');\r\nvar css = mensch.stringify(ast);\r\n\r\nconsole.log(css);\r\n// => p { color: black; }\r\n```\r\n\r\n# api\r\n\r\n## parse(css, [options={}])\r\n\r\nConvert a CSS string or an array of lexical tokens into a `stringify`-able AST.\r\n\r\n- `css` {String|Array} CSS string or array of lexical tokens\r\n- `[options]` {Object}\r\n- `[options.comments=false]` {Boolean} Allow comment nodes in the AST.\r\n- `[options.position=false]` {Boolean} Allow line/column position in the AST.\r\n\r\nWhen `{position: true}`, AST node will have a `position` property:\r\n\r\n```js\r\n{\r\n  type: 'comment',\r\n  text: ' Hello World! ',\r\n  position: {\r\n    start: { line: 1, col: 1 },\r\n    end: { line 1, col: 18 }\r\n  }\r\n}\r\n```\r\n\r\n## stringify(ast, [options={}])\r\n\r\nConvert a `stringify`-able AST into a CSS string.\r\n\r\n- `ast` {Object} A `stringify`-able AST\r\n- `[options]` {Object}\r\n- `[options.comments=false]` {Boolean} Allow comments in the stringified CSS.\r\n- `[options.indentation='']` {String} E.g., `indentation: '  '` will indent by\r\n    two spaces.\r\n\r\n## lex(css)\r\n\r\nConvert a CSS string to an array of lexical tokens for use with `.parse()`.\r\n\r\n- `css` {String} CSS\r\n\r\n# non-validating\r\n\r\nMensch is a non-validating CSS parser. While it can handle the major language\r\nconstructs just fine, and it can recover from gaffes like mis-matched braces and\r\nmissing or extraneous semi-colons, mensch can't tell you when it finds\r\ninvalid CSS like a misspelled property name or a misplaced `@import`.\r\n\r\n# comments\r\n\r\nUnlike most CSS parsers, mensch allows comments to be represented in the AST and\r\nsubsequently stringified with the `{comments: true}` option.\r\n\r\n```js\r\nvar options = { comments: true };\r\n```\r\n\r\n```js\r\nvar ast = mensch.parse('.red { color: red; /* Natch. */ }', options);\r\nvar css = mensch.stringify(ast, options);\r\n\r\nconsole.log(css);\r\n//=> .red { color: red; /* Natch. */ }\r\n```\r\n\r\nHowever, comments within the context of a selector, property, etc., will be\r\nignored. These comments are difficult to represent in the AST.\r\n\r\n```js\r\nvar ast = mench.parse('.red /*1*/ { color /*2*/: /*3*/ red /*4*/; }', options);\r\nvar css = mesch.stringify(ast, options);\r\n\r\nconsole.log(css);\r\n//=> .red { color: red; }\r\n```\r\n\r\n# ast\r\n\r\nThe structure of mensch's AST riffs on several existing CSS parsers, but it\r\nmight not be 100% compatible with other CSS parsers. Here it is in a nutshell:\r\n\r\n```js\r\n{\r\n  type: 'stylesheet'\r\n  stylesheet: {\r\n    rules: [{\r\n      type: 'rule',\r\n      selectors: ['.foo'],\r\n      declarations: [{\r\n        type: 'property',\r\n        name: 'color',\r\n        value: 'black'\r\n      }]\r\n    }]\r\n  }\r\n}\r\n```\r\n\r\n# credits\r\n\r\nMensch is based on several existing CSS parsers, but\r\n[nzakas/parser-lib](https://github.com/nzakas/parser-lib) and\r\n[visionmedia/css](https://github.com/visionmedia/css) are notable influences.\r\n\r\n# known users\r\n\r\n[voidlabs/mosaico](https://github.com/voidlabs/mosaico) uses Mensch parser to parse custom-flavored CSS rules in email templates and make the template editable: positions, comment parsing, multiple declarations for the same property have been keys to the choice of Mensch!\r\n\r\nPlease let us know if you use Mensch in your library!\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/brettstimmerman/mensch.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.3.3"
}
